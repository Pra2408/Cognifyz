# -*- coding: utf-8 -*-
"""COGNIFYZ All Task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ha45EpK-hTkPQdqGFK2rvRLWdGb0-zm6

#Task 1:- Data Overview

Objective: Understand the dataset structure.
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pandas as pd
import statsmodels.api as sm
from sklearn.model_selection import train_test_split
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import plotly.express as exp
import statsmodels.formula.api as smf

data=pd.read_excel("/content/COGNIFYZ.xlsx")
data

data.head()

data.shape

"""Interpretation:-

The dataset has 40 rows and 24 columns.

There are 40 entries or observations in the dataset, and each observation has 24 attributes or features.
"""

data.info()

"""Interpretation:-

The data types include integers (int64), objects (object, typically representing strings), and categorical variables such as gender, investment avenues, etc.
"""

data.columns

"""The data.columns gives us the Information about the total number of columns and their Names."""

data.isnull().sum()

"""From the above result , we get to know that there are no null values included in the datset. Hence can proceed with Further Statistical Analysis.

"""

print(data.describe())

"""Interpretations:-
The Descriptive Statistics is given above.The descriptive statistics include Total Count , Mean, Standard Deviation , Minimum, Maximum and the Quantiles (25%,50%,75%).

#TASK 2 :- Visualize gender distribution in the dataset.
"""

# Extract the gender column
gender_column = data['gender']

# Create a bar chart to visualize the distribution of genders
gender_counts = gender_column.value_counts()
gender_counts.plot(kind='bar', color=['blue', 'pink'])  # Assuming two genders for simplicity
plt.title('Distribution of Genders')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.show()

# Create a pie chart to visualize the distribution of genders
gender_counts = gender_column.value_counts()
gender_counts.plot(kind='pie', autopct='%1.1f%%', colors=['blue', 'pink'])
plt.title('Distribution of Genders')
plt.ylabel('')
plt.show()

"""From the Pie- Diagram, we get to know that from the total population, there are 62.5% of Male and 37.5% of Female.

#TASK 03 :- Present basic statistics for numerical columns.
"""

# Identify Numerical Columns
numerical_columns = data.select_dtypes(include=['int64'])  # Assuming only int64 columns are numerical

# Calculations
statistics = pd.DataFrame()

# Mean, Median, Standard Deviation
statistics['Mean'] = numerical_columns.mean()
statistics['Median'] = numerical_columns.median()
statistics['Standard Deviation'] = numerical_columns.std()

# Minimum, Maximum
statistics['Minimum'] = numerical_columns.min()
statistics['Maximum'] = numerical_columns.max()

# Mode
statistics['Mode'] = numerical_columns.mode().iloc[0]  # Assuming single mode, use iloc[0] to extract the mode

# Quantiles
quantiles = [0.25, 0.75]  # Example quantiles, you can adjust as needed
for quantile in quantiles:
    statistics[f'Quantile {quantile}'] = numerical_columns.quantile(quantile)

print(statistics)

"""The Mean , Median , Standard Deviation of each continuous Variable is given in the above Output.

#TASK 04 :- Identify the most preferred investment avenue.
"""

# Examine the column containing information about different investment avenues
investment_avenues = data['Investment_Avenues']

# Frequency Analysis
investment_avenue_counts = investment_avenues.value_counts()
highest_frequency = investment_avenue_counts.idxmax()
highest_frequency_count = investment_avenue_counts.max()

print(f"The investment avenue with the highest frequency is '{highest_frequency}' with {highest_frequency_count} occurrences.")

"""#TASK 05 :-Reasons for Investment

Objective: Analyze and summarize reasons
for investment choices.

Steps:

Explore Reasons Column: Investigate
the column where participants
provided reasons for their investment
choices.

1.Summarize Reasons: Identify common
themes or recurring reasons and
provide a summary.
"""

# Explore the column containing reasons for investment choices
reasons_column = data['Reason_Equity']  # Assuming 'Reason_Equity' column contains reasons for equity investments

# Summarize reasons
reasons_summary = reasons_column.value_counts()

print("Summary of reasons for investment in equity:")
print(reasons_summary)

"""i.) Capital Appreciation: This reason appears most frequently, with 30
occurrences. It suggests that investors are primarily interested in the potential for capital gains or increases in the value of their investments.

ii.) Dividend: This reason occurs 8 times, indicating that some investors are interested in equity investments for the dividends they offer. Dividends represent a portion of a company's profits distributed to shareholders.

iii.) Liquidity: This reason occurs 2 times, suggesting that a smaller number of investors are attracted to equity investments due to their liquidity. Liquidity refers to the ease with which an asset can be bought or sold in the market without significantly affecting its price.
"""



"""#TASK 06:- SAVING OBJECTIVES
Objective: Identify and present main
savings objectives.

Steps:

Analyze Savings Objectives: Examine
the column containing information
about participants' savings objectives.
1.

List and Describe Objectives: Create a
list and describe the main savings
objectives mentioned by participants.
"""

# Analyze the column containing information about participants' savings objectives
savings_objectives_column = data['What are your savings objectives?']

# List and Describe Objectives
objectives_count = savings_objectives_column.value_counts()

print("Main savings objectives mentioned by participants:")
for objective, count in objectives_count.items():
    print(f"- {objective}: {count} participants")

"""i.) Retirement Plan: This objective is mentioned by 24 participants, suggesting that a significant portion of the participants are saving for their retirement. This objective likely involves accumulating funds to support themselves financially during retirement years.

ii.) Health Care: This objective is mentioned by 13 participants, indicating that a considerable number of participants are saving for healthcare-related expenses. This could involve setting aside funds for medical treatments, insurance premiums, or other healthcare-related costs.

iii.) Education: This objective is mentioned by 3 participants, suggesting that a smaller number of participants are saving for educational purposes. This may include saving for their own education or that of their children, for expenses such as tuition fees, books, and other educational resources.

#TASK 07:- Common Information Sources

Objective: Analyze common sources participants
rely on for investment information.

Steps:

Explore Information Sources Column: Review
the column where participants indicated their
sources of investment information.
1.

Identify Common Sources: Analyze the data to
identify and summarize the most common
sources participants rely on.
"""

# Explore the column containing sources of investment information
information_sources_column = data['Source']

# Identify Common Sources
common_sources = information_sources_column.value_counts()

print("Most common sources participants rely on for investment information:")
for source, count in common_sources.items():
    print(f"- {source}: {count} participants")

"""i.) Financial Consultants: This source is the most commonly cited, with 16 participants relying on it for investment information. Financial consultants are professionals who provide advice on various financial matters, including investment strategies, portfolio management, and financial planning.

ii.) Newspapers and Magazines: Fourteen participants rely on newspapers and magazines for investment information. These traditional media sources often provide articles, columns, and analyses on financial markets, investment opportunities, and economic trends.

iii.) Television: Six participants mention television as a source of investment information. Television programs, such as financial news channels or investment shows, can offer insights, analysis, and discussions on investment-related topics.

iv.) Internet: Four participants rely on the internet for investment information. The internet provides a vast array of resources, including financial websites, investment forums, blogs, and social media platforms, where individuals can access news, research reports, and discussions about investments.

#Task 8: INVESTMENT DURATION

Objective: Calculate the average investment
duration.

Steps:

Analyze Investment Duration Column:
Examine the column containing information
about participants' investment durations.
1.

Calculate Average Duration: Use
appropriate statistical methods to calculate
the average investment duration.
"""

import re
# Analyze the column containing information about participants' investment durations
investment_duration_column = data['Duration']
# Convert duration strings to numerical values (assuming durations are in years)
def duration_to_years(duration):
    match = re.search(r'\d+', duration)  # Find the first sequence of digits
    if match:
        return int(match.group())  # Convert the matched sequence of digits to an integer
    else:
        return None

# Apply the function to the investment_duration_column
numerical_durations = investment_duration_column.apply(duration_to_years)

# Drop any None values
numerical_durations = numerical_durations.dropna()

# Calculate the Average Duration
average_duration = numerical_durations.mean()

print(f"The average investment duration is: {average_duration} years")

"""# Task 9: Expectations from Investments

Objective: Summarize participants' expectations
from investments.

Steps:

Explore Expectations Column: Review the
column where participants provided
information about their expectations.
1.

List and Describe Expectations: Create a list
and describe the common expectations
mentioned by participants.#
"""

# Explore the column containing information about participants' expectations from investments
expectations_column = data['Expect']

# List and Describe Expectations
expectations_count = expectations_column.value_counts()

print("Common expectations mentioned by participants:")
for expectation, count in expectations_count.items():
    print(f"- {expectation}: {count} participants")

"""i.) 20%-30%: This range is the most commonly mentioned expectation, with 32 participants expressing it. This suggests that a significant portion of participants anticipate annual returns ranging from 20% to 30% on their investments.

ii.) 30%-40%: Five participants expect returns in the range of 30% to 40%. This indicates that a smaller group of participants have higher expectations for returns, aiming for higher growth in their investment portfolios.

iii.) 10%-20%: Three participants have more conservative expectations, anticipating returns in the range of 10% to 20%. This suggests a smaller subset of participants who are content with lower but still significant returns on their investments.

#Task 10: Correlation Analysis

Objective: Explore potential correlations
between factors.

Steps:

Select Relevant Columns: Identify columns
such as age, investment duration, and
expected returns for correlation analysis.
1.

Use Statistical Methods or Visualizations:
Employ statistical methods (e.g., correlation
coefficients) or visualizations (e.g., scatter
plots) to explore and visualize potential
correlations.
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Analyze the column containing information about participants' investment durations
investment_duration_column = data['Duration']

# Select relevant columns for correlation analysis
relevant_columns = data[['age', 'Duration', 'Expect']]

# Convert duration strings to numerical values (assuming durations are in years)
def duration_to_years(duration):
    match = re.search(r'\d+', duration)  # Find the first sequence of digits
    if match:
        return int(match.group())  # Convert the matched sequence of digits to an integer
    else:
        return None

# Apply the function to the investment_duration_column
numerical_durations = investment_duration_column.apply(duration_to_years)

# Drop any None values
numerical_durations = numerical_durations.dropna()
# Drop any rows with missing values
relevant_columns = relevant_columns.dropna()

# Convert 'Expect' column to numerical values (extracting the midpoint of the percentage range)
def extract_percentage_midpoint(percentage_range):
    percentages = percentage_range.split('-')
    return (int(percentages[0].strip('%')) + int(percentages[1].strip('%'))) / 2

relevant_columns['Expect'] = relevant_columns['Expect'].apply(extract_percentage_midpoint)

# Perform correlation analysis
correlation_matrix = relevant_columns.corr()

# Visualize the correlation matrix using a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='Blues', fmt=".2f", linewidths=.5)
plt.title('Correlation Matrix')
plt.show()

# Create pair plots
sns.pairplot(relevant_columns, kind='scatter')
plt.show()

# Create joint plot
sns.jointplot(x='age', y='Expect', data=relevant_columns, kind='scatter')
plt.show()

# Assuming 'age' represents time or some sequential variable
sns.lineplot(x='age', y='Expect', data=relevant_columns)
plt.show()

sns.scatterplot(x='Duration', y='Expect', data=relevant_columns)
plt.show()